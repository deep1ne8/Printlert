version: '3.8'

services:
  printlert:
    build: .
    container_name: printlert-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - printlert-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: printlert-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - printlert-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-printlert123}

  nginx:
    image: nginx:alpine
    container_name: printlert-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    restart: unless-stopped
    networks:
      - printlert-network
    depends_on:
      - printlert

  # Optional: Database for future enhancements
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: printlert-db
  #   environment:
  #     POSTGRES_DB: printlert
  #     POSTGRES_USER: printlert_user
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   restart: unless-stopped
  #   networks:
  #     - printlert-network

  # Optional: Monitoring with Prometheus
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: printlert-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus-data:/prometheus
  #   restart: unless-stopped
  #   networks:
  #     - printlert-network

  # Optional: Grafana for dashboards
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: printlert-grafana
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   restart: unless-stopped
  #   networks:
  #     - printlert-network

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  printlert-network:
    driver: bridge
